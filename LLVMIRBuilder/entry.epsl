#import binjson;
#import eewriter;
#import instructions;
#import conversion;
#import fs;

ScopeVar {
    Str:name,
    Type_:type_,
    W:id,
    Val:addr,
}

FuncProto {
    Str:id,
    Type_?:ret_type_,
    Str:callee,
    [Type_]:arg_types_,
    Bool:takes_ownership,
    Bool:result_in_params
}

FuncState {
    FuncProto:proto, // the function's prototype
    [Val]:special_allocs, // stack allocs in this function not associated with a variable
    [Val]:special_refs, // values that have a hidden reference that must be cleaned up on an early return
    [ScopeVar]:vars, // all variables in this function
    [ScopeVar]:arg_vars, // variables from arguments
    [ScopeVar]:block_vars, // variables that exit scope at the end of this block
    [ScopeVar]:active_vars, // all variables in scope (with values)
    Block?:loop_block, // the current block to continue in or break from
}

State {
    BinJSON:binjson,
    [Struct_]?:structs,
    [ScopeVar]?:globals,
    [FuncProto]?:protos,
    FuncState?:func_state,
}

#global State?:state;

State#get state {
    return [state].unwrap;
}

FuncState#get func state {
    return [get state.func_state].unwrap;
}

Type_#read type_ [BinJSON:binjson] {
    [Type_]:generics = [Type_] [];
    for (BinJSON:generic_json in [[binjson].get["generics"]].get_list) {
        [generics].append[read type_ [generic_json]];
    };
    Z:bits = -1;
    BinJSON:bits_json = [binjson].get["bits"];
    if (![bits_json].is_null) {
        bits = [bits_json].get_int;
    };
    return Type_ [[[binjson].get["name"]].get_str, bits, generics];
}

Type_?#read voidable type_ [BinJSON:binjson] {
    if ([binjson].is_null) {
        return null;
    };
    [Type_]:generics = [Type_] [];
    for (BinJSON:generic_json in [[binjson].get["generics"]].get_list) {
        [generics].append[read type_ [generic_json]];
    };
    Z:bits = -1;
    BinJSON:bits_json = [binjson].get["bits"];
    if (![bits_json].is_null) {
        bits = [bits_json].get_int;
    };
    return Type_ [[[binjson].get["name"]].get_str, bits, generics];
}

FuncProto#read func proto [BinJSON:binjson] {
    [Type_]:arg_types_ = [Type_] [];
    for (BinJSON:arg_json in [[binjson].get["arguments"]].get_list) {
        [arg_types_].append[read type_ [[arg_json].get["type_"]]];
    };
    return FuncProto [
        [[binjson].get["id"]].get_str,
        read voidable type_ [[binjson].get["return_type_"]],
        [[binjson].get["callee"]].get_str,
        arg_types_,
        [[binjson].get["takes_ownership"]].get_bool,
        [[binjson].get["result_in_params"]].get_bool,
    ];
}

Z#main {
    BinJSON:binjson = read BinJSON_;

    state = State [binjson, null, null, null, null];

    start irgen [[[binjson].get["id_path"]].get_str];
    load structs;
    generate globals;
    define func protos;
    build funcs;
    Str:result = end irgen;
    state = null;

    write result [result];

    return 0;
}

BinJSON#read BinJSON_ {
    File?:maybe_file = open_file["temp/code.binjson"][[FILE_READ_MODE] | [FILE_BINARY_MODE]];
    if ([maybe_file].is_null) {
        abort "Failed to open code.binjson";
    };
    File:file = [maybe_file].unwrap;
    Str?:bytes = [file].read_all;
    if ([bytes].is_null) {
        abort "Failed to read code.binjson";
    };
    return parse_BinJSON[[bytes].unwrap];
}

#load structs {
    [Struct_]:structs = [Struct_] [];
    for (BinJSON:struct_json in [[get state.binjson].get["structs"]].get_list) {
        [Field]:fields = [Field] [];
        for (BinJSON:field_json in [[struct_json].get["fields"]].get_list) {
            [fields].append [Field [
                [[field_json].get["name"]].get_str,
                read type_ [[field_json].get["type_"]]
            ]];
        };
        Str?:destructor = null;
        if (![[struct_json].get["destructor"]].is_null) {
            destructor = [[struct_json].get["destructor"]].get_str;
        };
        [L]:extendee_ids = [L] [];
        for (BinJSON:id_json in [[struct_json].get["extendees"]].get_list) {
            [extendee_ids].append[[[id_json].get_str].parse_as_W64_in_base[16]];
        };
        Struct_:struct_ = Struct_ [
            [[struct_json].get["id"]].get_str,
            [[[struct_json].get["id_num"]].get_str].parse_as_W64_in_base[16],
            [[struct_json].get["name"]].get_str,
            [[struct_json].get["symbol"]].get_str,
            destructor,
            [[struct_json].get["global_free_fn"]].get_bool,
            [[struct_json].get["is_super"]].get_bool,
            extendee_ids,
            true, // is a refrence type
            fields
        ];
        [structs].append[struct_];
        [struct_].register;
    };
    get state.structs = structs;
    for (BinJSON:id_json in [[get state.binjson].get["structs_here"]].get_list) {
        Struct_:struct_ = [get struct_ by id [[id_json].get_str]].unwrap;
        if (struct_.has_global_free_fn) {
            generate free fn for_ [struct_] private: [false];
        };
        if ([struct_.extendee_ids].len > 0 || struct_.is_super) {
            generate vtable for_ [struct_];
        };
    };
}

#generate globals {
    [ScopeVar]:globals = [ScopeVar] [];
    [BinJSON]:globals_json = [[get state.binjson].get["globals"]].get_list;
    for (BinJSON:global_json in globals_json) {
        Str:name = [[global_json].get["name"]].get_str;
        Type_:type_ = read type_ [[global_json].get["type_"]];
        W:id = (W)[[global_json].get["id"]].get_int;
        Val:addr = make ptr to global [type_] [null] [c null_ [type_]];
        [globals].append[ScopeVar [name, type_, id, addr]];
    };
    get state.globals = globals;
}

#define func protos {
    [FuncProto]:protos = [FuncProto] [];
    BinJSON:binjson = get state.binjson;
    for (BinJSON:proto_json in [[[binjson].get["functions"]].get_list] + [[[binjson].get["extern_functions"]].get_list]) {
        FuncProto:proto = read func proto [proto_json];
        extern fn [proto.ret_type_] [proto.callee] [proto.arg_types_];
        [protos].append[proto];
    };
    get state.protos = protos;
}

FuncProto#get func proto [Str:id] {
    for (FuncProto:proto in [get state.protos].unwrap) {
        if ([proto.id] equals [id]) {
            return proto;
        };
    };

    abort "Cannot find function prototype with id {}" % id;
}

#build funcs {
    for (BinJSON:func_json in [[get state.binjson].get["functions"]].get_list) {
        build func [func_json];
    };
}

#build func [BinJSON:func_json] {
    if ([[func_json].get["dllexport"]].get_bool) {
        add func specifier ["dllexport"];
    };
    FuncProto:proto = read func proto [func_json];
if (fn [proto.ret_type_] [proto.callee] [proto.arg_types_]) {
    [ScopeVar]:vars = [ScopeVar] [];
    for (BinJSON:var_json in [[func_json].get["vars"]].get_list) {
        Type_:type_ = read type_ [[var_json].get["type_"]];
        Val:addr = &[var [type_]];
        Str:name = [[var_json].get["name"]].get_str;
        W:id = (W)[[var_json].get["id"]].get_int;
        [vars].append[ScopeVar [name, type_, id, addr]];
    };
    [vars].extend[[get state.globals].unwrap];

    [ScopeVar]:arg_vars = [ScopeVar] [];
    [BinJSON]:arg_list = [[func_json].get["arguments"]].get_list;
    for (L:i enumerating arg_list) {
        BinJSON:arg_json = arg_list[i];
        Str:name = [[arg_json].get["name"]].get_str;
        W:id = (W)[[arg_json].get["variable"]].get_int;

        ScopeVar?:maybe_var = null;
        for (ScopeVar:var in vars) {
            if (var.id == id) {
                maybe_var = var;
            };
        };
        if ([maybe_var].is_null) {
            abort "Argument {}'s variable (id {}) does not exist" % name % id;
        };
        ScopeVar:var = [maybe_var].unwrap;

        Val:arg = func arg [i];
        [arg].incr_ref;
        [*[var.addr]] = [arg];

        [arg_vars].append[var];
    };

    [Val]:special_allocs = [Val] [];
    for (BinJSON:alloc_json in [[func_json].get["special_allocs"]].get_list) {
        [special_allocs].append[&[var [read type_ [alloc_json]]]];
    };

    get state.func_state = FuncState [
        proto, special_allocs, [Val] [], vars, arg_vars, [ScopeVar] [], [ScopeVar] [], null
    ];

    BinJSON:block_json = [func_json].get["block"];
    build block [block_json] toplevel: [true];
end fn;
} else {
    abort "Duplicate function callee {}" % proto.callee;
};
}

Val#get special alloc [W:i] {
    return get func state.special_allocs[i];
}

ScopeVar#get var [W:id] {
    for (ScopeVar:var in get func state.vars) {
        if (var.id == id) {
            return var;
        };
    };
    abort "Cannot find a var with ID {}" % id;
}

[ScopeVar]#get var list [BinJSON:list_json] {
    [ScopeVar]:result = [ScopeVar] [];
    for (BinJSON:id_json in [list_json].get_list) {
        [result].append[get var [(W)[id_json].get_int]];
    };
    return result;
}

#push special ref [Val:val] {
    [val].incr_ref;
    [get func state.special_refs].append[val];
}

#pop special ref [Val:val] {
    [Val]:refs = get func state.special_refs;
    Z64:ref_idx = [refs].index_of[val];
    if (ref_idx == -1) {
        abort "{} is not listed as a special ref, thus it cannot be popped from the list of special refs";
    };
    [refs].pop[(L)ref_idx];
    [val].decr_ref;
}

#cleanup var list [[ScopeVar]:var_list] {
    for (ScopeVar:var in var_list) {
        [*[var.addr]].decr_ref;
    };
}

#perpare for_ block termination {
    cleanup var list [get func state.block_vars];
}

Type_?#current func ret type_ {
    return get func state.proto.ret_type_;
}

#perpare for_ function termination returning [Val?:ret_val] {
    if (ret_val) {
        [[ret_val].unwrap].incr_ref;
    };
    cleanup var list [get func state.active_vars];
    cleanup var list [get func state.arg_vars];
    for (Val:val in get func state.special_refs) {
        [val].decr_ref;
    };
    if (ret_val) {
        [[ret_val].unwrap].checkless_decr_ref;
    };
}

#perpare for_ function termination {
    perpare for_ function termination returning [null];
}

[Val?]#build ir [BinJSON:ir_json] {
    [Val?]:results = [Val?] [];
    for (BinJSON:instruction_json in [ir_json].get_list) {
        [Val]:operands = [Val] [];
        for (BinJSON:operand_json in [[instruction_json].get["operands"]].get_list) {
            Val?:result = results[(W)[operand_json].get_int];
            if ([result].is_null) {
                abort "Cannot use void instruction as operand";
            };
            [operands].append[[result].unwrap];
        };
        [results].append[build instruction [instruction_json] using [operands]];
    };
    return results;
}

#build block [BinJSON:block_json] toplevel: [Bool:toplevel] {
    [ScopeVar]:old_block_vars = get func state.block_vars;
    [ScopeVar]:old_active_vars = get func state.active_vars;
    get func state.block_vars = get var list [[block_json].get["vars_here"]];
    get func state.active_vars = get var list [[block_json].get["intialized_vars"]];
    build ir [[block_json].get["ir"]];
    if (!is block terminated) {
        if (toplevel) {
            toplevel block termination [block_json];
        } else {
            perpare for_ block termination;
        };
    };
    get func state.block_vars = old_block_vars;
    get func state.active_vars = old_active_vars;
}

#build block [BinJSON:block_json] {
    build block [block_json] toplevel: [false];
}

#toplevel block termination [BinJSON:block_json] {
    if ([[block_json].get["does_terminate_function"]].get_bool) {
        mark as unreachable;
    } else {
        perpare for_ function termination;
        ret void;
    };
}

Val#build seperated value [BinJSON:val_json] {
    [Val?]:results = build ir [[val_json].get["ir"]];
    Val?:result = results[(W)[[val_json].get["val"]].get_int];
    if (result) {
        return [result].unwrap;
    } else {
        abort "Seperated value references non-value instruction";
    };
}

Block?#get loop block {
    return get func state.loop_block;
}

#set loop block [Block?:block] {
    get func state.loop_block = block;
}

#write result [Str:result] {
    File?:maybe_file = open_file["temp/code.ll"][FILE_WRITE_MODE];
    if ([maybe_file].is_null) {
        abort "Failed to open code.ll";
    };
    File:file = [maybe_file].unwrap;
    if (![file].write[result]) {
        abort "Failed to write to code.ll";
    };
}
