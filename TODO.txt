TODO:
* `Matrix` type?
* `Map` type
* serialization and complete compilation of `given`s
* serialization and complete compilation of `Poly` types_
* add way to apply operation to every element of array (like Linq Select)
* add option for string constants to be statically allocated
* top tracking so we can alloca instead of malloc
* self host LLVMIR section
* struct bound methods: stringify, compare (maybe), (called on) free, is truthy, casting (maybe)
* add `Struct` type that's treated as a superclass of all structs
* add `ObjectGenSubflags` (passed to both `clang` (when producing an object file, or going through an object file) and `llc`)
* figure out a better solution for CmdUtils locating runcommand.so
* allow `switch` blocks with non-constant operands by converting them to Conditionals using the `equals` builtin (or equivalent)
* implement 'deep equals' and 'deep not equals' functions and write test for them
* remove unnecessary parenthesis around if, for, elif, given, while, etc...
* add new `at` method akin to JavaScript's, new `pop` method that always pops the last item (to eliminate `ack "len(gth)? ?- ?1"`)
* && and || operators should short circut
* warn when the truth value is taken resulting in an always true truth value
* fix struct equality (you can't memcmp them because of the padding bytes)
* remove and replace every function that uses memcmp in builtins.c (except formatString) as every usage of memcmp in builtins.c is unsafe except formatString's usage (again due to padding bytes)
* add `<Optional<Any>:optional>.expect<Str:fail_msg>` builtin akin to Rust's
* once custom struct destructors are supported, File and its associated functions shouldn't be builtins
