#import operations;
#import stringify;
#import eewriter;
#import binjson;
#import entry;

Val#build constant value [BinJSON:instruction_json] to [Type_:type_] {
    return make constant [[instruction_json].get["constant"]] of type_ [type_];
}

Val#build addition using [[Val]:operands] to [Type_:type_] {
    operands = cast [operands] to [type_];
    return [operands[0]] + [operands[1]];
}

Val#build subtraction using [[Val]:operands] to [Type_:type_] {
    operands = cast [operands] to [type_];
    return [operands[0]] - [operands[1]];
}

Val#build multiplication using [[Val]:operands] to [Type_:type_] {
    operands = cast [operands] to [type_];
    return [operands[0]] * [operands[1]];
}

Val#build division using [[Val]:operands] to [Type_:type_] {
    operands = cast [operands] to [type_];
    return safe [operands[0]] / [operands[1]];
}

Val#build modulo using [[Val]:operands] to [Type_:type_] {
    operands = cast [operands] to [type_];
    return safe [operands[0]] % [operands[1]];
}

Val#build negation using [[Val]:operands] to [Type_:type_] {
    return negate [cast [operands[0]] to [type_]];
}

Val#build exponentiation [BinJSON:instruction_json] using [[Val]:operands] to [Type_:type_] {
    Str:mode = [[instruction_json].get["mode"]].get_str;
    if ([mode] equals ["chain"]) {
        Val:base = cast [operands[0]] to [type_];
        Z:exponent = [[instruction_json].get["exponent_value"]].get_int;
        return do chain power of [base] to the [exponent];
    } elif (([mode] equals ["sqrt"]) || ([mode] equals ["cbrt"])) {
        Val:base = cast [operands[0]] to [type_];
        extern fn [type_] ["llvm.{}.{}" % mode % type_.bits] [[Type_] [type_]] [[Val] [base]];
        return func ret;
    } elif ([mode] equals ["pow"]) {
        if ([type_].is_float) {
            Val:base = cast [operands[0]] to [type_];
            Val:exponent = cast [operands[1]] to [type_];
            extern fn [type_] ["llvm.pow.{}" % type_.bits] [[Type_] [type_, type_]] [[Val] [base, exponent]];
            return cast [func ret] to [type_];
        } else {
            return integer [operands[0]] to the [operands[1]];
        };
    };
    abort "Unknown exponentiation mode {}" % mode;
}

Val#build variable [BinJSON:instruction_json] {
    W:id = (W)[[instruction_json].get["variable"]].get_int;
    return load [*[get var [id].addr]];
}


Val#build comparison [BinJSON:instruction_json] using [[Val]:operands] {
    Type_:common_type_ = read type_ [[instruction_json].get["common_type_"]];
    Val:o1 = cast [operands[0]] to [common_type_];
    Val:o2 = cast [operands[1]] to [common_type_];

    Str:comparison_operator = [[instruction_json].get["type"]].get_str;
    if ([comparison_operator] equals ["greater"]) {
        return [o1] gt [o2];
    } elif ([comparison_operator] equals ["less"]) {
        return [o1] lt [o2];
    } elif ([comparison_operator] equals ["greater_equal"]) {
        return [o1] ge [o2];
    } elif ([comparison_operator] equals ["less_equal"]) {
        return [o1] le [o2];
    } else {
        abort "Unknown comparison operator {}" % comparison_operator;
    };
}

Val#build add one using [[Val]:operands] {
    Val:operand = operands[0];
    return [operand] + [c [1] [operand.type_]];
}

Val#build sub one using [[Val]:operands] {
    Val:operand = operands[0];
    return [operand] - [c [1] [operand.type_]];
}

Val#build string literal [BinJSON:instruction_json] to [Type_:type_] {
    Str:string = [[instruction_json].get["string"]].get_str;
    /*
    Val:arr = malloc pointee [type_];
    [arr].init_ref;
    [[arr].length] = [c L_ [[string].len]];
    [[arr].capacity] = [c L_ [[string].len + 1]];
    [[arr].content] = [mut str [string] with [1] extra capacity];
    */
    Val:str_mem = global mut str [string];
    [Val]:elements = [Val] [c L_ [1], c L_ [0], c L_ [[string].len], str_mem];
    Val:arr = make global struct_ [Str_] [null] [elements];
    return arr;
}

Val#build array creation using [[Val]:operands] to [Type_:type_] {
    Type_:elem_type_ = type_.generics[0];
    operands = cast [operands] to [elem_type_];
    L:capacity = [operands].len;
    if (capacity < 10) {
        capacity = 10;
    };
    Val:arr = new array [type_] [operands] with capacity [capacity];
    if ([elem_type_].is_ref) {
        extern fn [null] ["epsl_increment_array_ref_counts"] [[Type_] [Internal_, L_]]
            [[Val] [cast [arr] to [Internal_], make elem int [elem_type_]]];
    };
    return arr;
}

Val#build array access using [[Val]:operands] {
    Val:arr = operands[0];
    Val:index = cast [operands[1]] to [L_];
    verify idx [index] in array [arr];
    Val:result = load [[arr].idx[index]];
    [result].incr_ref;
    [arr].check_ref;
    [result].checkless_decr_ref;
    return result;
}

Val#build equality [BinJSON:instruction_json] using [[Val]:operands] inverted: [Bool:inverted] {
    Type_:common_type_ = read type_ [[instruction_json].get["common_type_"]];
    Val:o1 = cast [operands[0]] to [common_type_];
    Val:o2 = cast [operands[1]] to [common_type_];
    if (inverted) {
        return [o1] ne [o2];
    } else {
        return [o1] eq [o2];
    };
}

Val#build instantiation [BinJSON:instruction_json] using [[Val]:operands] to [Type_:type_] {
    Struct_:struct_ = [[type_].get_struct].unwrap;
    [Val]:casted_vals = [Val] [];
    for (L:i enumerating struct_.fields) {
        Val:casted_val = cast [operands[i]] to [struct_.fields[i].type_];
        [casted_val].incr_ref;
        [casted_vals].append[casted_val];
    };
    return new ref struct_ [type_] [casted_vals];
}

Val#build member access [BinJSON:instruction_json] using [[Val]:operands] {
    Type_:struct_type_ = read type_ [[instruction_json].get["struct_type_"]];
    Val:struct_val = cast [operands[0]] to [struct_type_];
    Struct_:struct_ = [[struct_type_].get_struct].unwrap;
    Str:member_name = [[instruction_json].get["member"]].get_str;
    for (L:i enumerating struct_.fields) {
        if ([struct_.fields[i].name] equals [member_name]) {
            Val:result = load [[struct_val].[i]];
            [result].incr_ref;
            [struct_val].check_ref;
            [result].checkless_decr_ref;
            return result;
        };
    };
    abort "Struct {} does not have requested field {}" % struct_.name % member_name;
}

Val#build zeroed array creation using [[Val]:operands] to [Type_:type_] {
    Val:size = cast [operands[0]] to [L_];
    Val:elem_size = sizeof elem [type_];
    extern fn [Internal_] ["epsl_make_blank_array"] [[Type_] [L_, L_]] [[Val] [size, elem_size]];
    return cast [func ret] to [type_];
}

Val#build format chain using [[Val]:operands] {
    Val:template = operands[0];

    [Val]:vals_to_check_ref = [Val] [template];
    [Val]:strs_to_free = [Val] [];

    Val:str_count = c [(W)[operands].len - 1];
    Val:str_arr = &[alloca [str_count] [Str_]];
    W:i = 0;
    for (Val:operand in operands from 1) {
        Val:stringified = operand;
        if ([operand.type_] == [Str_]) {
            [vals_to_check_ref].append[stringified];
        } else {
            stringified = make stringify of [operand];
            [operand].check_ref;
            [strs_to_free].append[stringified];
        };
        [[str_arr].idx[c [i++]]] = [stringified];
    };

    extern fn [Str_] ["epsl_format_string"] [[Type_] [Str_, Pointer [Str_], W_]]
        [[Val] [template, str_arr, str_count]];
    Val:result = func ret;

    for (Val:val in vals_to_check_ref) {
        [val].check_ref;
    };

    for (Val:str in strs_to_free) {
        free[[str].content];
        free[str];
    };

    return result;
}

Val#build boolean operation [BinJSON:instruction_json] using [[Val]:operands] {
    PHINode:result_phi = new PHI [Bool_];

    Val:o1 = operands[0];
    Val:o1_truth = [o1].truth_value;
    [o1].check_ref;

    [result_phi].add_incoming[o1_truth];

    Label:compute_o2 = new label;
    Label:end = new label;

    Val?:o2_is_result = null;
    Str:instruction_type = [[instruction_json].get["type"]].get_str;
    if ([instruction_type] equals ["and"]) {
        o2_is_result = o1_truth;
    } elif ([instruction_type] equals ["or"]) {
        o2_is_result = NOT [o1_truth];
    } else {
        abort "Invalid boolean operation type {}" % instruction_type;
    };

    goto_ [[o2_is_result].unwrap] ? [compute_o2] : [end];

[compute_o2]:;
    Val:o2 = build seperated value [[instruction_json].get["o2"]];
    Val:o2_truth = [o2].truth_value;
    [o2].check_ref;

    [result_phi].add_incoming[o2_truth];

[end]:;
    return [result_phi].place_here;
}

Val#build null_ value {
    return c null_ [Null_];
}

Val#build function call [BinJSON:instruction_json] using [[Val]:operands] to [Type_:result_type_] {
    Str:function_id = [[instruction_json].get["function"]].get_str;
    return [call function [function_id] with args [operands] to [result_type_]].unwrap;
}

Val#build optional array access using [[Val]:operands] to [Type_:result_type_] {
    Val:arr = operands[0];
    Val:idx = cast [operands[1]] to [L_];
    PHINode:phi = new PHI [result_type_];

    if_ [[idx] lt [[arr].length]];
        Val:result = cast [[arr].idx[idx]] to [result_type_];
        [result].incr_ref;
        [arr].check_ref;
        [result].checkless_decr_ref;
        [phi].add_incoming[result];
    else_;
        [arr].check_ref;
        [phi].add_incoming[c null_ [result_type_]];
    end block;

    return [phi].place_here;
}

Val#build not using [[Val]:operands] {
    return [operands[0]].untruth_value;
}

Val#build cast using [[Val]:operands] to [Type_:type_] {
    return cast [operands[0]] to [type_];
}

Val#build valued instruction [BinJSON:instruction_json] using [[Val]:operands] {
    Str:type = [[instruction_json].get["type"]].get_str;
    Type_:type_ = read type_ [[instruction_json].get["type_"]];
    if ([type] equals ["constant_value"]) {
        return build constant value [instruction_json] to [type_];
    } elif ([type] equals ["addition"]) {
        return build addition using [operands] to [type_];
    } elif ([type] equals ["subtraction"]) {
        return build subtraction using [operands] to [type_];
    } elif ([type] equals ["multiplication"]) {
        return build multiplication using [operands] to [type_];
    } elif (([type] equals ["division"]) || ([type] equals ["int_division"])) {
        return build division using [operands] to [type_];
    } elif ([type] equals ["modulo"]) {
        return build modulo using [operands] to [type_];
    } elif ([type] equals ["negation"]) {
        return build negation using [operands] to [type_];
    } elif ([type] equals ["exponentiation"]) {
        return build exponentiation [instruction_json] using [operands] to [type_];
    } elif ([type] equals ["variable"]) {
        return build variable [instruction_json];
    } elif ([type] equals ["greater"]) {
        return build comparison [instruction_json] using [operands];
    } elif ([type] equals ["less"]) {
        return build comparison [instruction_json] using [operands];
    } elif ([type] equals ["greater_equal"]) {
        return build comparison [instruction_json] using [operands];
    } elif ([type] equals ["less_equal"]) {
        return build comparison [instruction_json] using [operands];
    } elif ([type] equals ["add_one"]) {
        return build add one using [operands];
    } elif ([type] equals ["sub_one"]) {
        return build sub one using [operands];
    } elif ([type] equals ["string_literal"]) {
        return build string literal [instruction_json] to [type_];
    } elif ([type] equals ["array_creation"]) {
        return build array creation using [operands] to [type_];
    } elif ([type] equals ["array_access"]) {
        return build array access using [operands];
    } elif ([type] equals ["equals"]) {
        return build equality [instruction_json] using [operands] inverted: [false];
    } elif ([type] equals ["not_equals"]) {
        return build equality [instruction_json] using [operands] inverted: [true];
    } elif ([type] equals ["instantiation"]) {
        return build instantiation [instruction_json] using [operands] to [type_];
    } elif ([type] equals ["member_access"]) {
        return build member access [instruction_json] using [operands];
    } elif ([type] equals ["zeroed_array_creation"]) {
        return build zeroed array creation using [operands] to [type_];
    } elif ([type] equals ["format_chain"]) {
        return build format chain using [operands];
    } elif ([type] equals ["and"]) {
        return build boolean operation [instruction_json] using [operands];
    } elif ([type] equals ["or"]) {
        return build boolean operation [instruction_json] using [operands];
    } elif ([type] equals ["null_value"]) {
        return build null_ value;
    } elif ([type] equals ["function_call"]) {
        return build function call [instruction_json] using [operands] to [type_];
    } elif ([type] equals ["optional_array_access"]) {
        return build optional array access using [operands] to [type_];
    } elif ([type] equals ["not"]) {
        return build not using [operands];
    } elif ([type] equals ["cast"]) {
        return build cast using [operands] to [type_];
    } else {
        abort "Unknown valued instruction type {}" % type;
    };
}

#build initial assignment [BinJSON:instruction_json] using [[Val]:operands] {
    ScopeVar:var = get var [(W)[[instruction_json].get["variable"]].get_int];
    Val:operand = cast [operands[0]] to [read type_ [[instruction_json].get["var_type_"]]];
    [operand].incr_ref;
    [*[var.addr]] = [operand];
}

#build assignment [BinJSON:instruction_json] using [[Val]:operands] {
    ScopeVar:var = get var [(W)[[instruction_json].get["variable"]].get_int];
    Val:operand = cast [operands[0]] to [read type_ [[instruction_json].get["var_type_"]]];
    [operand].incr_ref;
    [*[var.addr]].decr_ref;
    [*[var.addr]] = [operand];
}

#build return_ void {
    perpare for_ function termination;
    ret void;
}

#build return_ using [[Val]:operands] {
    Val:returnee = cast [operands[0]] to [[current func ret type_].unwrap];
    perpare for_ function termination returning [returnee];
    ret [returnee];
}

#build while_ [BinJSON:instruction_json] {
    Block?:outer_loop = get loop block;
Label:cond_label = new label:;
    Val:cond = build seperated value [[instruction_json].get["condition"]];
    while_ [consume truth [cond]] from [cond_label];
        set loop block [current block];
        build block [[instruction_json].get["block"]];
    end block;
    set loop block [outer_loop];
}

#build unused value wrapper using [[Val]:operands] {
    [operands[0]].check_ref;
}

#build conditional [BinJSON:instruction_json] {
    Label:end_label = new label;
    Label:else_label = end_label;
    BinJSON:else_json = [instruction_json].get["else"];
    if (![else_json].is_null) {
        else_label = new label;
    };

    [BinJSON]:conditions_json = [[instruction_json].get["conditions"]].get_list;
    for (L:i enumerating conditions_json) {
        BinJSON:condition_json = conditions_json[i];
        Label:otherwise = else_label;
        Label?:next_label = null;
        if (i != [conditions_json].len-1) {
            otherwise = new label;
            next_label = otherwise;
        };
        Label:block_label = new label;

        Val:cond = build seperated value [[condition_json].get["condition"]];
        goto_ [consume truth [cond]] ? [block_label] : [otherwise];

    [block_label]:;
        build block [[condition_json].get["block"]];
        goto_ [end_label];

        if (next_label) {
        [[next_label].unwrap]:;
        };
    };

    if (![else_json].is_null) {
    [else_label]:;
        build block [else_json];
        goto_ [end_label];
    };

[end_label]:;
}

#build array assignment using [[Val]:operands] {
    Val:arr = operands[0];
    Type_:elem_type_ = arr.type_.generics[0];
    Val:index = cast [operands[1]] to [L_];
    Val:elem = cast [operands[2]] to [elem_type_];
    verify idx [index] in array [arr];
    Val:arr_location = [arr].idx[index];
    [load [arr_location]].decr_ref;
    [elem].incr_ref;
    [[arr].idx[index]] = [elem];
    [arr].check_ref;
}

#build member assignment [BinJSON:instruction_json] using [[Val]:operands] {
    Type_:struct_type_ = read type_ [[instruction_json].get["struct_type_"]];
    Val:struct_val = cast [operands[0]] to [struct_type_];
    Struct_:struct_ = [[struct_type_].get_struct].unwrap;
    Str:member_name = [[instruction_json].get["member"]].get_str;
    for (L:i enumerating struct_.fields) {
        Field:field = struct_.fields[i];
        if ([field.name] equals [member_name]) {
            Val:field_location = [struct_val].[i];
            [load [field_location]].decr_ref;
            Val:new_val = cast [operands[1]] to [field.type_];
            [new_val].incr_ref;
            [field_location] = [new_val];
        };
    };
    [struct_val].check_ref;
}

#build switch_ [BinJSON:instruction_json] using [[Val]:operands] {
    Val:operand = operands[0];

    Label:end_label = new label;
    Label:default_label = end_label;
    BinJSON:default_json = [instruction_json].get["default"];
    if (![default_json].is_null) {
        default_label = new label;
    };

    [Val]:block_targets = [Val] [];
    [Label]:block_labels = [Label] [];
    [BinJSON]:arms_json = [[instruction_json].get["arms"]].get_list;
    for (BinJSON:arm_json in arms_json) {
        [block_targets].append[make constant [[arm_json].get["target"]]
            of type_ [operand.type_]];
        [block_labels].append[new label];
    };

    switch_ on [operand] to [block_targets] [block_labels] otherwise [default_label];

    for (L:i enumerating arms_json) {
    [block_labels[i]]:;
        build block [[arms_json[i]].get["block"]];
        goto_ [end_label];
    };

    if (![default_json].is_null) {
    [default_label]:;
        build block [default_json];
        goto_ [end_label];
    };

[end_label]:;
}

#build for_ [BinJSON:instruction_json] using [[Val]:operands] {
    Label:check_label = new label;
    Label:loop_label = new label;
    Label:iter_label = new label;
    Label:finish_label = new label;

    W:idx_alloc_i = (W)[[instruction_json].get["iter_alloc"]].get_int;
    Val:idx_var = *[get special alloc [idx_alloc_i]];

    Type_:idx_type_ = read type_ [[instruction_json].get["idx_type_"]];

    Val:from = c [0] [idx_type_];
    Val?:maybe_to = null;
    Val?:maybe_array = null;
    Val?:maybe_array_len_ptr = null;
    Val?:maybe_array_content_ptr = null;
    Val:step = c [1] [idx_type_];
    Val:negative_step = c [false];
    Bool:signed_step = false;

    Bool:is_in = false;
    Bool:is_enumerating = false;

    [BinJSON]:clause_name_jsons = [[instruction_json].get["clause_names"]].get_list;
    for (L:i enumerating clause_name_jsons) {
        BinJSON:clause_name_json = clause_name_jsons[i];
        Str:clause_name = [clause_name_json].get_str;
        Bool:is_in_clause = [clause_name] equals ["in"];
        Bool:is_enumerating_clause = [clause_name] equals ["enumerating"];
        if ([clause_name] equals ["from"]) {
            from = cast [operands[i]] to [idx_type_];
        } elif ([clause_name] equals ["to"]) {
            maybe_to = cast [operands[i]] to [idx_type_];
        } elif ([clause_name] equals ["step"]) {
            Val:uncast_step = operands[i];
            step = cast [uncast_step] to [idx_type_];
            Type_:step_type_ = operands[i].type_;
            signed_step = ![step_type_].is_unsigned_int;
            if (signed_step) {
                negative_step = [uncast_step] lt [c [0] [step_type_]];
            };
        } elif (is_in_clause) {
            is_in = true;
        } elif (is_enumerating_clause) {
            is_enumerating = true;
        };
        if (is_in_clause || is_enumerating_clause) {
            Val:array = operands[i];
            push special ref [array];
            maybe_array = array;
            Val:array_len_ptr = [array].length;
            maybe_array_len_ptr = array_len_ptr;
            maybe_array_content_ptr = [array].content;
            maybe_to = cast [load [array_len_ptr]] to [idx_type_];
        };
    };

    Val:to = [maybe_to].unwrap;

    if (signed_step) {
        [idx_var] = [[negative_step] ? [[to] - [c [1] [idx_type_]]] : [from]];
    } else {
        [idx_var] = [from];
    };

[check_label]:;
    if (is_in || is_enumerating) {
        to = cast [load [[maybe_array_len_ptr].unwrap]] to [idx_type_];
    };

    Val:idx = load [idx_var];

    Val:should_exit = [idx] ge [to];
    if (signed_step) {
        should_exit = [should_exit] OR [[idx] lt [from]];
    };

    should_exit = expect [should_exit] to be [false];
    goto_ [should_exit] ? [finish_label] : [loop_label];

[loop_label]:;
    Val:var = *[get var [(W)[[instruction_json].get["variable"]].get_int].addr];
    if (is_in) {
        Val:elem = load [[[maybe_array_content_ptr].unwrap].idx[idx]];
        [elem].incr_ref;
        [var] = [elem];
    } else {
        [var] = [idx];
    };

    Block?:outer_loop = get loop block;
    Block:loop_block = create block with entry [iter_label],
        otherwise [finish_label], ending with [finish_label];
    set loop block [loop_block];
    build block [[instruction_json].get["block"]];
    set loop block [outer_loop];

[iter_label]:;
    idx = load [idx_var];

    if ([idx_type_].is_unsigned_int && signed_step) {
        Val:greater_step = [negate [step]] gt [idx];
        Val:will_underflow = [negative_step] AND [greater_step];
        will_underflow = expect [will_underflow] to be [false];
        if_ [will_underflow];
            goto_ [finish_label];
        end block;
    };

    [idx_var] = [[idx] + [step]];

    goto_ [check_label];

[finish_label]:;
    if (maybe_array) {
        pop special ref [[maybe_array].unwrap];
    };
}

#build given_ [BinJSON:instruction_json] {
    Label:end_label = new label;
    Label:else_label = end_label;
    BinJSON:else_json = [instruction_json].get["else"];
    if (![else_json].is_null) {
        else_label = new label;
    };

    [BinJSON]:parts_json = [[instruction_json].get["parts"]].get_list;
    for (L:i enumerating parts_json) {
        BinJSON:part_json = parts_json[i];
        Label:otherwise = else_label;
        Label?:next_label = null;
        if (i != [parts_json].len-1) {
            otherwise = new label;
            next_label = otherwise;
        };
        Label:block_label = new label;

        Val:val = build seperated value [[part_json].get["val"]];
        Type_:optional_type_ = read type_ [[part_json].get["optional_type_"]];
        Val:optional = cast [val] to [optional_type_];
        goto_ [[optional] != null_] ? [block_label] : [otherwise];

    [block_label]:;
        Type_:to_type_ = read type_ [[part_json].get["to_type_"]];
        Val:to = cast [optional] to [to_type_];

        W:var_id = (W)[[part_json].get["var_id"]].get_int;
        [to].incr_ref;
        [*[get var [var_id].addr]] = [to];
        [val].check_ref;

        build block [[part_json].get["block"]];
        goto_ [end_label];

        if (next_label) {
        [[next_label].unwrap]:;
        };
    };

    if (![else_json].is_null) {
    [else_label]:;
        build block [else_json];
        goto_ [end_label];
    };

[end_label]:;
}

#build void function call [BinJSON:instruction_json] using [[Val]:operands] {
    Str:function_id = [[instruction_json].get["function"]].get_str;
    call function [function_id] with args [operands] to [null];
}

#build abort_ void {
    extern fn [null] ["epsl_abort_void"] [[Type_] []] [[Val] []];
    mark as unreachable;
}

#build abort_ using [[Val]:operands] {
    extern fn [null] ["epsl_abort"] [[Type_] [Str_]] [[Val] [operands[0]]];
    mark as unreachable;
}

#build break_ {
    perpare for_ block termination;
    break_ [[get loop block].unwrap];
}

#build continue_ {
    perpare for_ block termination;
    continue_ [[get loop block].unwrap];
}

#build void instruction [BinJSON:instruction_json] using [[Val]:operands] {
    Str:type = [[instruction_json].get["type"]].get_str;
    if ([type] equals ["initial_assignment"]) {
        build initial assignment [instruction_json] using [operands];
    } elif ([type] equals ["assignment"]) {
        build assignment [instruction_json] using [operands];
    } elif ([type] equals ["return_void"]) {
        build return_ void;
    } elif ([type] equals ["return"]) {
        build return_ using [operands];
    } elif ([type] equals ["while"]) {
        build while_ [instruction_json];
    } elif ([type] equals ["unused_value_wrapper"]) {
        build unused value wrapper using [operands];
    } elif ([type] equals ["uninit_var_declaration"]) {

    } elif ([type] equals ["conditional"]) {
        build conditional [instruction_json];
    } elif ([type] equals ["array_assignment"]) {
        build array assignment using [operands];
    } elif ([type] equals ["member_assignment"]) {
        build member assignment [instruction_json] using [operands];
    } elif ([type] equals ["switch"]) {
        build switch_ [instruction_json] using [operands];
    } elif ([type] equals ["for"]) {
        build for_ [instruction_json] using [operands];
    } elif ([type] equals ["given"]) {
        build given_ [instruction_json];
    } elif ([type] equals ["void_function_call"]) {
        build void function call [instruction_json] using [operands];
    } elif ([type] equals ["abort_void"]) {
        build abort_ void;
    } elif ([type] equals ["abort"]) {
        build abort_ using [operands];
    } elif ([type] equals ["break"]) {
        build break_;
    } elif ([type] equals ["continue"]) {
        build continue_;
    } else {
        abort "Unknown void instruction type {}" % type;
    };
}

Val?#build instruction [BinJSON:instruction_json] using [[Val]:operands] {
    Val?:instruction_result = null;
    if ([instruction_json].contains_key["error_frame"]) {
        add error frame [[[instruction_json].get["error_frame"]].get_str];
    };
    if ([instruction_json].contains_key["type_"]) {
        Val:result = build valued instruction [instruction_json] using [operands];
        if (result.assignable) {
            abort "Instructions cannot have an AssignableVal result";
        };
        Type_:expected_type_ = read type_ [[instruction_json].get["type_"]];
        if (![result.type_] == [expected_type_]) {
            abort "Expected type_ {} from instruction {}, got type_ {}" % [expected_type_].stringify
                % [[instruction_json].get["type"]].get_str % [result.type_].stringify;
        };
        instruction_result = result;
    } else {
        build void instruction [instruction_json] using [operands];
    };
    if (!is block terminated && [instruction_json].contains_key["error_frame"]) {
        remove error frame;
    };
    return instruction_result;
}
