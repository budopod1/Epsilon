$import tokenizer;
$import modules;

@super;
NodeWSpan {
    W:start_index,
    W:end_index
}

@super;
@extends NodeWSpan;
ToplevelItem {}

@super;
@extends NodeWSpan;
Annotation {}

@extends Annotation;
PrivateAnnotation {}

@extends Annotation;
IDAnnotation {
    Str:id
}

@extends Annotation;
ValueAnnotation {}

@extends Annotation;
SuperAnnotation {}

@extends Annotation;
ConcreteAnnotation {}

@extends Annotation;
ExtendsAnnotation {
    Str:extendee
}

@extends ToplevelItem;
ImportDeclaration {
    Import:import
}

@super;
@extends ToplevelItem;
AnnotatableNode {
    [:Annotation]:annotations
}

@extends AnnotatableNode;
RawGlobal {
    Tokens:tokens
}

@extends AnnotatableNode;
RawFunction {
    Tokens:ret_type_,
    Tokens:template,
    Tokens:body
}

@extends AnnotatableNode;
RawStruct {
    Str:name,
    Tokens:body
}

@extends S0ModuleContent;
S0EPSLModuleContent {
    Str:file_text,
    [RawGlobal]:raw_globals,
    [RawFunction]:raw_functions,
    [RawStruct]:raw_structs
}

@extends NodeWSpan;
S1EPSLStruct {
    StructDeclaration:struct_decl,
    Tokens:body
}

@extends S1ModuleContent;
S1EPSLModuleContent {
    Str:file_text,
    [S1EPSLStruct]:s1_structs,
    [RawGlobal]:raw_globals,
    [RawFunction]:raw_functions
}

Str#[RawGlobal:raw_global].stringify {
    return "RawGlobal({})" % [raw_global.tokens].stringify;
}

Str#[RawFunction:raw_function].stringify {
    return "RawFunction({}#{}, {})"
        % [raw_function.ret_type_].stringify
        % [raw_function.template].stringify
        % [raw_function.body].stringify;
}

Str#[RawStruct:raw_struct].stringify {
    return "RawStruct({}, {})"
        % raw_struct.name
        % [raw_struct.body].stringify;
}

Str#[S0EPSLModuleContent:modcon].stringify {
    Str:globals_str = Str [];
    for (RawGlobal:raw_global in modcon.raw_globals) {
        if (globals_str) {
            [globals_str].extend[", "];
        };
        [globals_str].extend[[raw_global].stringify];
    };

    Str:functions_str = Str [];
    for (RawFunction:raw_function in modcon.raw_functions) {
        if (functions_str) {
            [functions_str].extend[", "];
        };
        [functions_str].extend[[raw_function].stringify];
    };

    Str:structs_str = Str [];
    for (RawStruct:raw_struct in modcon.raw_structs) {
        if (structs_str) {
            [structs_str].extend[", "];
        };
        [structs_str].extend[[raw_struct].stringify];
    };

    return "S0EPSLModuleContent(
imports: {}
raw_globals: {}
raw_functions: {}
raw_structs: {}
)" % [modcon.imports].stringify % globals_str % functions_str % structs_str;
}
